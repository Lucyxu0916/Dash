{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from plotly import __version__\n",
    "from plotly.offline import init_notebook_mode, plot, iplot\n",
    "from plotly import graph_objs as go\n",
    "\n",
    "import dash\n",
    "import dash_core_components as dcc\n",
    "import dash_html_components as html\n",
    "from dash.dependencies import Input,Output\n",
    "import pandas_datareader.data as web\n",
    "import datetime\n",
    "\n",
    "\n",
    "from ipywidgets import interact, interactive, fixed, interact_manual\n",
    "import ipywidgets as widgets\n",
    "init_notebook_mode(connected=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plots and Layouts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "app = dash.Dash()\n",
    "\n",
    "app.layout = html.Div(children=[\n",
    "    html.H1(children='Stock Report'),  \n",
    "    html.H4(children='Please type the name of the stock you want to check'),\n",
    "    dcc.Input(id='input', value='KO', type='text'),\n",
    "    html.Div(id='output-graph'),\n",
    "    dcc.Slider(id='year-slider',\n",
    "               min=2015,\n",
    "               max=2019,\n",
    "               marks={2015: '2015',2016: '2016',2017: '2017',2018: '2018',2019: '2019'},\n",
    "               value=2016),\n",
    "    html.Label('Multi-Select Dropdown'),\n",
    "    dcc.Dropdown(\n",
    "        id='stocktype',\n",
    "        options=[\n",
    "            {'label': 'Open', 'value': 'Open'},\n",
    "            {'label': 'Close', 'value': 'Close'},\n",
    "            {'label': 'Low', 'value': 'Low'},\n",
    "            {'label':'High','value':'High'}\n",
    "        ],\n",
    "        value=['Open', 'Low'],\n",
    "        multi=True\n",
    "    ),\n",
    "])\n",
    "\n",
    "@app.callback(\n",
    "    Output(component_id='output-graph', component_property='children'),\n",
    "    [Input(component_id='input', component_property='value'),\n",
    "    Input(component_id='year-slider',component_property='value'),\n",
    "    Input(component_id='stocktype', component_property='value')]\n",
    ")\n",
    "def update_value(input_data,year,button):\n",
    "    start = datetime.datetime(year, 1, 1)\n",
    "    end = datetime.datetime.now()\n",
    "    df = web.DataReader(input_data, 'yahoo', start, end)\n",
    "\n",
    "    return dcc.Graph(\n",
    "        id='example-graph',\n",
    "        figure={\n",
    "            'data': [\n",
    "                {'x': df.index, 'y': df.Open, 'type': 'line','value': 'Open', 'name': Open},\n",
    "                {'x': df.index, 'y': df.Close, 'type': 'line','value': 'Open', 'name': Close}\n",
    "            ],\n",
    "            'layout': go.Layout(\n",
    "            xaxis={'title': 'Date'},\n",
    "            yaxis={'title': 'Dollar per Share'},\n",
    "            title=input_data\n",
    "        )\n",
    "        }\n",
    "    )\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Run"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=False, host='0.0.0.0', port = 8126)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
